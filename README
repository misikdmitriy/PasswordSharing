Password Sharing

1. to start project use 'dotnet run' command or 'docker-compose up'
1.1. requirements to launch application using 'dotnet run':
	- Microsoft SQL Server Express;
	- .NET Core 2.1
	
	How to run:
	- Specify connection string in 'appsettings.json' located in 'PasswordSharing.Web' directory
	- Run 'dotnet run --project PasswordSharing.Web\PasswordSharing.Web.csproj --urls "http://localhost:80"' in solution root folder (where 'PasswordSharing.sln' located)
	
1.2. requirements to launch application using 'dcoker-compose up':
	- Windows OS
	- Docker & Docker Compose
	
	How to run:
	- Run 'docker-compose up' in solution root folder

2.2 requirements to launch tests:
	- Microsoft SQL Server Express;
	- .NET Core 2.1
	
	How to run:
	- Specify connection string in 'testsettings.json' located in 'PasswordSharing.ApiTests' directory
	- Run 'dotnet test' in solution root folder
	
3. API description:
	- API described on page 'http://localhost:80/swagger' when application run
	- There are 2 API methods:
		1. Generate password:
			- Description: method used to encode and share password. Returns link to password.
			- Method: POST
			- URL: 'api/password'
			- Body: { "password": "string", "expiresIn": "int32" }
			- OK result: 200 OK
			- Fail result: 400 Bad Request; 500 Internal Server Error
		2. Retrieve password:
			- Description: method used to retrieve password by shared link.
			- Method: GET
			- URL: 'api/password/{passwordId}?key={key}'
			- OK Result: 200 OK
			- Fail result: 400 Bad Request; 500 Internal Server Error

4. For development used .NET Core 2.1 with Microsoft SQL Server.
	For password encription used RSA algorithm. Key size is 1024. 
	So max password size that can be encrypted is 117 bytes.
	New encryption key generates each time new password encrypted.
	Decryption key passed via share URL. This is the only place used for key storing.
	Password randomly re-encrypts after is was decrypted or expired without possibility to decrypt.
	This guarantees that retrieved password will never decrypted again.
	It's impossible to decrypt password because of key storing only in URL and re-encryption password after use it.
	
5. Details:
	- every time on password encryption new key generated.
	- the only place where key stored is URL.
	- every time unique URL generated even for same passwords
	- it is impossible to decrypt used passwords.
	- all HTTP requests registered in DB ([dbo].[HttpMessages] table)
	- all password 'mutations' registered in DB ([dbo].[Events] table)